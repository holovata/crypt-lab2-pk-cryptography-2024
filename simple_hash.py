'''
Кроки обчислення

1) Хеш-значення (hash_value) ініціалізується нулем.
Ця змінна буде використовуватися для збереження проміжних та кінцевих результатів обчислення хешу.

2) Константа p встановлюється в 31.
Це число вибрано, оскільки воно дозволяє ефективно обчислювати хеш для символів ASCII.
Можна також використати число 53 для Unicode символів.

3) Для кожного символу у вхідному рядку data обчислюється значення хешу.
Кожен символ перетворюється в його числове представлення за допомогою функції ord(char).

4) Для кожного символу char обчислюється нове hash_value як ((hash_value * p + ord(char)) % mod).
Ця операція виконується для кожного символу:
    4.1) Множення поточного hash_value на p дає новий "ваговий" внесок для хешу.
    4.2) Додається числове значення символу.
    4.3) Використання модуля mod гарантує, що хеш-значення залишається в обмежених межах
    і зменшує можливість колізій.
'''


def simple_hash(data, mod=997):
    """ Проста криптографічна хеш-функція з використанням поліноміального розсіювання.

    Args:
    data (str): вхідні дані, які потрібно захешувати.
    mod (int): модуль для обчислення хешу, велике просте число.

    Returns:
    int: хеш-код вхідних даних.
    """
    hash_value = 0
    p = 53  # Можна вибрати 31 або 53 залежно від розміру символів (31 для ASCII, 53 для Unicode)
    for char in data:
        hash_value = (hash_value * p + ord(char)) % mod
    return hash_value


# Використання функції
input_data = "Hello, world!"
hash_result = simple_hash(input_data)
print("Hash:", hash_result)
